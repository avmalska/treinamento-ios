//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 5 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `butaofundo`.
    static let butaofundo = Rswift.ColorResource(bundle: R.hostingBundle, name: "butaofundo")
    /// Color `cinza-sobreposicao`.
    static let cinzaSobreposicao = Rswift.ColorResource(bundle: R.hostingBundle, name: "cinza-sobreposicao")
    /// Color `fundo`.
    static let fundo = Rswift.ColorResource(bundle: R.hostingBundle, name: "fundo")
    /// Color `preto-sobreposicao`.
    static let pretoSobreposicao = Rswift.ColorResource(bundle: R.hostingBundle, name: "preto-sobreposicao")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "butaofundo", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func butaofundo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.butaofundo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cinza-sobreposicao", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cinzaSobreposicao(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cinzaSobreposicao, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "fundo", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func fundo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.fundo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "preto-sobreposicao", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func pretoSobreposicao(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.pretoSobreposicao, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "butaofundo", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func butaofundo(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.butaofundo.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "cinza-sobreposicao", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func cinzaSobreposicao(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cinzaSobreposicao.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "fundo", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func fundo(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.fundo.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "preto-sobreposicao", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func pretoSobreposicao(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.pretoSobreposicao.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 12 images.
  struct image {
    /// Image `builder`.
    static let builder = Rswift.ImageResource(bundle: R.hostingBundle, name: "builder")
    /// Image `card_back`.
    static let card_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "card_back")
    /// Image `card_template`.
    static let card_template = Rswift.ImageResource(bundle: R.hostingBundle, name: "card_template")
    /// Image `default_crop`.
    static let default_crop = Rswift.ImageResource(bundle: R.hostingBundle, name: "default_crop")
    /// Image `hearhstone_cards`.
    static let hearhstone_cards = Rswift.ImageResource(bundle: R.hostingBundle, name: "hearhstone_cards")
    /// Image `hearhstone_class`.
    static let hearhstone_class = Rswift.ImageResource(bundle: R.hostingBundle, name: "hearhstone_class")
    /// Image `hearhstone_spells`.
    static let hearhstone_spells = Rswift.ImageResource(bundle: R.hostingBundle, name: "hearhstone_spells")
    /// Image `hearthstone_adventure`.
    static let hearthstone_adventure = Rswift.ImageResource(bundle: R.hostingBundle, name: "hearthstone_adventure")
    /// Image `hearthstone_raritiy`.
    static let hearthstone_raritiy = Rswift.ImageResource(bundle: R.hostingBundle, name: "hearthstone_raritiy")
    /// Image `heathstone_logo`.
    static let heathstone_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "heathstone_logo")
    /// Image `keeper`.
    static let keeper = Rswift.ImageResource(bundle: R.hostingBundle, name: "keeper")
    /// Image `panda`.
    static let panda = Rswift.ImageResource(bundle: R.hostingBundle, name: "panda")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "builder", bundle: ..., traitCollection: ...)`
    static func builder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.builder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "card_back", bundle: ..., traitCollection: ...)`
    static func card_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.card_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "card_template", bundle: ..., traitCollection: ...)`
    static func card_template(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.card_template, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "default_crop", bundle: ..., traitCollection: ...)`
    static func default_crop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.default_crop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hearhstone_cards", bundle: ..., traitCollection: ...)`
    static func hearhstone_cards(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hearhstone_cards, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hearhstone_class", bundle: ..., traitCollection: ...)`
    static func hearhstone_class(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hearhstone_class, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hearhstone_spells", bundle: ..., traitCollection: ...)`
    static func hearhstone_spells(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hearhstone_spells, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hearthstone_adventure", bundle: ..., traitCollection: ...)`
    static func hearthstone_adventure(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hearthstone_adventure, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hearthstone_raritiy", bundle: ..., traitCollection: ...)`
    static func hearthstone_raritiy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hearthstone_raritiy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heathstone_logo", bundle: ..., traitCollection: ...)`
    static func heathstone_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heathstone_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "keeper", bundle: ..., traitCollection: ...)`
    static func keeper(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.keeper, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "panda", bundle: ..., traitCollection: ...)`
    static func panda(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.panda, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 7 localization keys.
    struct localizable {
      /// Value: Card Types
      static let types = Rswift.StringResource(key: "types", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Classes
      static let classes = Rswift.StringResource(key: "classes", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Create a Custom Card
      static let createCstomCard = Rswift.StringResource(key: "createCstomCard", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Expansions
      static let sets = Rswift.StringResource(key: "sets", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Rarities
      static let rarities = Rswift.StringResource(key: "rarities", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Spell Schools
      static let spellSchools = Rswift.StringResource(key: "spellSchools", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: View Custom Cards
      static let viewCustomCards = Rswift.StringResource(key: "viewCustomCards", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Card Types
      static func types(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("types", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "types"
        }

        return NSLocalizedString("types", bundle: bundle, comment: "")
      }

      /// Value: Classes
      static func classes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("classes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "classes"
        }

        return NSLocalizedString("classes", bundle: bundle, comment: "")
      }

      /// Value: Create a Custom Card
      static func createCstomCard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("createCstomCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "createCstomCard"
        }

        return NSLocalizedString("createCstomCard", bundle: bundle, comment: "")
      }

      /// Value: Expansions
      static func sets(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sets", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sets"
        }

        return NSLocalizedString("sets", bundle: bundle, comment: "")
      }

      /// Value: Rarities
      static func rarities(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rarities", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "rarities"
        }

        return NSLocalizedString("rarities", bundle: bundle, comment: "")
      }

      /// Value: Spell Schools
      static func spellSchools(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("spellSchools", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "spellSchools"
        }

        return NSLocalizedString("spellSchools", bundle: bundle, comment: "")
      }

      /// Value: View Custom Cards
      static func viewCustomCards(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("viewCustomCards", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "viewCustomCards"
        }

        return NSLocalizedString("viewCustomCards", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
